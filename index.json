{
  "api/NF.Tool.ReleaseNoteMaker.Common.Config.ReleaseNoteConfig.html": {
    "href": "api/NF.Tool.ReleaseNoteMaker.Common.Config.ReleaseNoteConfig.html",
    "title": "Class ReleaseNoteConfig | NF.Tool.ReleaseNoteMaker",
    "summary": "Class ReleaseNoteConfig Namespace NF.Tool.ReleaseNoteMaker.Common.Config Assembly NF.Tool.ReleaseNoteMaker.Common.dll public sealed class ReleaseNoteConfig Inheritance object ReleaseNoteConfig Properties Maker public ReleaseNoteConfigMaker Maker { get; } Property Value ReleaseNoteConfigMaker Reader public ReleaseNoteConfigReader Reader { get; } Property Value ReleaseNoteConfigReader Sections [DataMember(Name = \"Section\")] public List<ReleaseNoteSection> Sections { get; } Property Value List<ReleaseNoteSection> Types [DataMember(Name = \"Type\")] public List<ReleaseNoteType> Types { get; } Property Value List<ReleaseNoteType>"
  },
  "api/NF.Tool.ReleaseNoteMaker.Common.Config.ReleaseNoteConfigMaker.E_END_OF_LINE.html": {
    "href": "api/NF.Tool.ReleaseNoteMaker.Common.Config.ReleaseNoteConfigMaker.E_END_OF_LINE.html",
    "title": "Enum ReleaseNoteConfigMaker.E_END_OF_LINE | NF.Tool.ReleaseNoteMaker",
    "summary": "Enum ReleaseNoteConfigMaker.E_END_OF_LINE Namespace NF.Tool.ReleaseNoteMaker.Common.Config Assembly NF.Tool.ReleaseNoteMaker.Common.dll public enum ReleaseNoteConfigMaker.E_END_OF_LINE Fields CRLF = 1 ENVIRONMENT = 2 LF = 0"
  },
  "api/NF.Tool.ReleaseNoteMaker.Common.Config.ReleaseNoteConfigMaker.html": {
    "href": "api/NF.Tool.ReleaseNoteMaker.Common.Config.ReleaseNoteConfigMaker.html",
    "title": "Class ReleaseNoteConfigMaker | NF.Tool.ReleaseNoteMaker",
    "summary": "Class ReleaseNoteConfigMaker Namespace NF.Tool.ReleaseNoteMaker.Common.Config Assembly NF.Tool.ReleaseNoteMaker.Common.dll public sealed class ReleaseNoteConfigMaker Inheritance object ReleaseNoteConfigMaker Properties CsprojPath public string CsprojPath { get; set; } Property Value string Directory public string Directory { get; set; } Property Value string EndOfLine public ReleaseNoteConfigMaker.E_END_OF_LINE EndOfLine { get; set; } Property Value ReleaseNoteConfigMaker.E_END_OF_LINE Ignores public List<string> Ignores { get; } Property Value List<string> IsAllBullets public bool IsAllBullets { get; set; } Property Value bool IsSingleFile public bool IsSingleFile { get; set; } Property Value bool IsWrap public bool IsWrap { get; set; } Property Value bool IssueFormat public string IssueFormat { get; set; } Property Value string IssuePattern public string IssuePattern { get; set; } Property Value string Name public string Name { get; set; } Property Value string OrphanPrefix public string OrphanPrefix { get; set; } Property Value string OutputFileName public string OutputFileName { get; set; } Property Value string StartString public string StartString { get; set; } Property Value string TemplateFilePath public string TemplateFilePath { get; set; } Property Value string TitleFormat public string TitleFormat { get; set; } Property Value string Version public string Version { get; set; } Property Value string"
  },
  "api/NF.Tool.ReleaseNoteMaker.Common.Config.ReleaseNoteConfigReader.html": {
    "href": "api/NF.Tool.ReleaseNoteMaker.Common.Config.ReleaseNoteConfigReader.html",
    "title": "Class ReleaseNoteConfigReader | NF.Tool.ReleaseNoteMaker",
    "summary": "Class ReleaseNoteConfigReader Namespace NF.Tool.ReleaseNoteMaker.Common.Config Assembly NF.Tool.ReleaseNoteMaker.Common.dll public sealed class ReleaseNoteConfigReader Inheritance object ReleaseNoteConfigReader Properties TitlePattern public string TitlePattern { get; set; } Property Value string VersionPattern public string VersionPattern { get; set; } Property Value string"
  },
  "api/NF.Tool.ReleaseNoteMaker.Common.Config.ReleaseNoteSection.html": {
    "href": "api/NF.Tool.ReleaseNoteMaker.Common.Config.ReleaseNoteSection.html",
    "title": "Class ReleaseNoteSection | NF.Tool.ReleaseNoteMaker",
    "summary": "Class ReleaseNoteSection Namespace NF.Tool.ReleaseNoteMaker.Common.Config Assembly NF.Tool.ReleaseNoteMaker.Common.dll public sealed class ReleaseNoteSection Inheritance object ReleaseNoteSection Properties DisplayName public string DisplayName { get; set; } Property Value string Path public string Path { get; set; } Property Value string"
  },
  "api/NF.Tool.ReleaseNoteMaker.Common.Config.ReleaseNoteType.html": {
    "href": "api/NF.Tool.ReleaseNoteMaker.Common.Config.ReleaseNoteType.html",
    "title": "Class ReleaseNoteType | NF.Tool.ReleaseNoteMaker",
    "summary": "Class ReleaseNoteType Namespace NF.Tool.ReleaseNoteMaker.Common.Config Assembly NF.Tool.ReleaseNoteMaker.Common.dll public sealed class ReleaseNoteType Inheritance object ReleaseNoteType Properties Category public string Category { get; set; } Property Value string DisplayName public string DisplayName { get; set; } Property Value string IsCheck public bool IsCheck { get; set; } Property Value bool IsShowContent public bool IsShowContent { get; set; } Property Value bool"
  },
  "api/NF.Tool.ReleaseNoteMaker.Common.Config.TomlModel.html": {
    "href": "api/NF.Tool.ReleaseNoteMaker.Common.Config.TomlModel.html",
    "title": "Class TomlModel | NF.Tool.ReleaseNoteMaker",
    "summary": "Class TomlModel Namespace NF.Tool.ReleaseNoteMaker.Common.Config Assembly NF.Tool.ReleaseNoteMaker.Common.dll public sealed class TomlModel Inheritance object TomlModel Properties ReleaseNote public ReleaseNoteConfig ReleaseNote { get; set; } Property Value ReleaseNoteConfig"
  },
  "api/NF.Tool.ReleaseNoteMaker.Common.Config.html": {
    "href": "api/NF.Tool.ReleaseNoteMaker.Common.Config.html",
    "title": "Namespace NF.Tool.ReleaseNoteMaker.Common.Config | NF.Tool.ReleaseNoteMaker",
    "summary": "Namespace NF.Tool.ReleaseNoteMaker.Common.Config Classes ReleaseNoteConfig ReleaseNoteConfigMaker ReleaseNoteConfigReader ReleaseNoteSection ReleaseNoteType TomlModel Enums ReleaseNoteConfigMaker.E_END_OF_LINE"
  },
  "api/NF.Tool.ReleaseNoteMaker.Common.Fragments.FragmentBasename.html": {
    "href": "api/NF.Tool.ReleaseNoteMaker.Common.Fragments.FragmentBasename.html",
    "title": "Class FragmentBasename | NF.Tool.ReleaseNoteMaker",
    "summary": "Class FragmentBasename Namespace NF.Tool.ReleaseNoteMaker.Common.Fragments Assembly NF.Tool.ReleaseNoteMaker.Common.dll public sealed record FragmentBasename Inheritance object FragmentBasename Constructors FragmentBasename(string, string, int) public FragmentBasename(string Issue, string Category, int RetryCount) Parameters Issue string Category string RetryCount int Properties Category public string Category { get; init; } Property Value string Empty public static FragmentBasename Empty { get; } Property Value FragmentBasename Issue public string Issue { get; init; } Property Value string RetryCount public int RetryCount { get; init; } Property Value int"
  },
  "api/NF.Tool.ReleaseNoteMaker.Common.Fragments.FragmentContent.html": {
    "href": "api/NF.Tool.ReleaseNoteMaker.Common.Fragments.FragmentContent.html",
    "title": "Class FragmentContent | NF.Tool.ReleaseNoteMaker",
    "summary": "Class FragmentContent Namespace NF.Tool.ReleaseNoteMaker.Common.Fragments Assembly NF.Tool.ReleaseNoteMaker.Common.dll public sealed record FragmentContent Inheritance object FragmentContent Constructors FragmentContent(string, FragmentBasename, string) public FragmentContent(string SectionDisplayName, FragmentBasename FragmentBasename, string Data) Parameters SectionDisplayName string FragmentBasename FragmentBasename Data string Properties Data public string Data { get; init; } Property Value string FragmentBasename public FragmentBasename FragmentBasename { get; init; } Property Value FragmentBasename SectionDisplayName public string SectionDisplayName { get; init; } Property Value string"
  },
  "api/NF.Tool.ReleaseNoteMaker.Common.Fragments.FragmentFile.html": {
    "href": "api/NF.Tool.ReleaseNoteMaker.Common.Fragments.FragmentFile.html",
    "title": "Class FragmentFile | NF.Tool.ReleaseNoteMaker",
    "summary": "Class FragmentFile Namespace NF.Tool.ReleaseNoteMaker.Common.Fragments Assembly NF.Tool.ReleaseNoteMaker.Common.dll public sealed record FragmentFile Inheritance object FragmentFile Constructors FragmentFile(string, string) public FragmentFile(string FileName, string Category) Parameters FileName string Category string Properties Category public string Category { get; init; } Property Value string FileName public string FileName { get; init; } Property Value string"
  },
  "api/NF.Tool.ReleaseNoteMaker.Common.Fragments.FragmentFinder.html": {
    "href": "api/NF.Tool.ReleaseNoteMaker.Common.Fragments.FragmentFinder.html",
    "title": "Class FragmentFinder | NF.Tool.ReleaseNoteMaker",
    "summary": "Class FragmentFinder Namespace NF.Tool.ReleaseNoteMaker.Common.Fragments Assembly NF.Tool.ReleaseNoteMaker.Common.dll public sealed class FragmentFinder Inheritance object FragmentFinder Fields FRAGMENT_IGNORE_FILELIST public static readonly string[] FRAGMENT_IGNORE_FILELIST Field Value string[] Methods FindFragments(string, ReleaseNoteConfig, bool) public static (Exception? exOrNull, FragmentResult result) FindFragments(string baseDirectory, ReleaseNoteConfig config, bool isStrictMode) Parameters baseDirectory string config ReleaseNoteConfig isStrictMode bool Returns (Exception exOrNull, FragmentResult result) Indent(string, string) public static string Indent(string text, string prefix) Parameters text string prefix string Returns string SplitFragments(List<FragmentContent>, ReleaseNoteConfig) public static List<FragmentContent> SplitFragments(List<FragmentContent> fragmentContents, ReleaseNoteConfig config) Parameters fragmentContents List<FragmentContent> config ReleaseNoteConfig Returns List<FragmentContent>"
  },
  "api/NF.Tool.ReleaseNoteMaker.Common.Fragments.FragmentPath.html": {
    "href": "api/NF.Tool.ReleaseNoteMaker.Common.Fragments.FragmentPath.html",
    "title": "Struct FragmentPath | NF.Tool.ReleaseNoteMaker",
    "summary": "Struct FragmentPath Namespace NF.Tool.ReleaseNoteMaker.Common.Fragments Assembly NF.Tool.ReleaseNoteMaker.Common.dll public readonly record struct FragmentPath Constructors FragmentPath() [Obsolete(\"Do not use constructor\", true)] public FragmentPath() Methods Get(string, ReleaseNoteConfig) public static FragmentPath Get(string baseDirectory, ReleaseNoteConfig config) Parameters baseDirectory string config ReleaseNoteConfig Returns FragmentPath GetDirectory(string) public string GetDirectory(string sectionPath) Parameters sectionPath string Returns string Resolve(string) public string Resolve(string section) Parameters section string Returns string"
  },
  "api/NF.Tool.ReleaseNoteMaker.Common.Fragments.FragmentResult.html": {
    "href": "api/NF.Tool.ReleaseNoteMaker.Common.Fragments.FragmentResult.html",
    "title": "Class FragmentResult | NF.Tool.ReleaseNoteMaker",
    "summary": "Class FragmentResult Namespace NF.Tool.ReleaseNoteMaker.Common.Fragments Assembly NF.Tool.ReleaseNoteMaker.Common.dll public sealed class FragmentResult Inheritance object FragmentResult Properties FragmentContents public required List<FragmentContent> FragmentContents { get; init; } Property Value List<FragmentContent> FragmentFiles public required List<FragmentFile> FragmentFiles { get; init; } Property Value List<FragmentFile> Methods Default() public static FragmentResult Default() Returns FragmentResult Equals(FragmentResult?) Indicates whether the current object is equal to another object of the same type. public bool Equals(FragmentResult? other) Parameters other FragmentResult An object to compare with this object. Returns bool true if the current object is equal to the other parameter; otherwise, false. Equals(object?) Determines whether the specified object is equal to the current object. public override bool Equals(object? obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false."
  },
  "api/NF.Tool.ReleaseNoteMaker.Common.Fragments.IssuePart.html": {
    "href": "api/NF.Tool.ReleaseNoteMaker.Common.Fragments.IssuePart.html",
    "title": "Class IssuePart | NF.Tool.ReleaseNoteMaker",
    "summary": "Class IssuePart Namespace NF.Tool.ReleaseNoteMaker.Common.Fragments Assembly NF.Tool.ReleaseNoteMaker.Common.dll public sealed record IssuePart Inheritance object IssuePart Constructors IssuePart(bool, bool, string, int) public IssuePart(bool IsDigit, bool HasDigit, string NonDigitPart, int Number) Parameters IsDigit bool HasDigit bool NonDigitPart string Number int Properties HasDigit public bool HasDigit { get; init; } Property Value bool IsDigit public bool IsDigit { get; init; } Property Value bool NonDigitPart public string NonDigitPart { get; init; } Property Value string Number public int Number { get; init; } Property Value int Methods CompareTo(IssuePart?) Compares the current instance with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object. public int CompareTo(IssuePart? other) Parameters other IssuePart An object to compare with this instance. Returns int A value that indicates the relative order of the objects being compared. The return value has these meanings: Value Meaning Less than zero This instance precedes other in the sort order. Zero This instance occurs in the same position in the sort order as other. Greater than zero This instance follows other in the sort order. IssueKey(string) public static IssuePart IssueKey(string issue) Parameters issue string Returns IssuePart Operators operator >(IssuePart, IssuePart) public static bool operator >(IssuePart a, IssuePart b) Parameters a IssuePart b IssuePart Returns bool operator >=(IssuePart, IssuePart) public static bool operator >=(IssuePart a, IssuePart b) Parameters a IssuePart b IssuePart Returns bool operator <(IssuePart, IssuePart) public static bool operator <(IssuePart a, IssuePart b) Parameters a IssuePart b IssuePart Returns bool operator <=(IssuePart, IssuePart) public static bool operator <=(IssuePart a, IssuePart b) Parameters a IssuePart b IssuePart Returns bool"
  },
  "api/NF.Tool.ReleaseNoteMaker.Common.Fragments.html": {
    "href": "api/NF.Tool.ReleaseNoteMaker.Common.Fragments.html",
    "title": "Namespace NF.Tool.ReleaseNoteMaker.Common.Fragments | NF.Tool.ReleaseNoteMaker",
    "summary": "Namespace NF.Tool.ReleaseNoteMaker.Common.Fragments Classes FragmentBasename FragmentContent FragmentFile FragmentFinder FragmentResult IssuePart Structs FragmentPath"
  },
  "api/NF.Tool.ReleaseNoteMaker.Common.ReleaseNoteMakerException.html": {
    "href": "api/NF.Tool.ReleaseNoteMaker.Common.ReleaseNoteMakerException.html",
    "title": "Class ReleaseNoteMakerException | NF.Tool.ReleaseNoteMaker",
    "summary": "Class ReleaseNoteMakerException Namespace NF.Tool.ReleaseNoteMaker.Common Assembly NF.Tool.ReleaseNoteMaker.Common.dll public sealed class ReleaseNoteMakerException : Exception Inheritance object Exception ReleaseNoteMakerException Constructors ReleaseNoteMakerException() public ReleaseNoteMakerException() ReleaseNoteMakerException(string) public ReleaseNoteMakerException(string message) Parameters message string ReleaseNoteMakerException(string, Exception) public ReleaseNoteMakerException(string message, Exception innerException) Parameters message string innerException Exception Properties StackTrace Gets a string representation of the immediate frames on the call stack. public override string StackTrace { get; } Property Value string A string that describes the immediate frames of the call stack. If no stack trace is available (such as prior to stack unwinding from a throw statement), the value is null."
  },
  "api/NF.Tool.ReleaseNoteMaker.Common.ScopedFileDeleter.html": {
    "href": "api/NF.Tool.ReleaseNoteMaker.Common.ScopedFileDeleter.html",
    "title": "Struct ScopedFileDeleter | NF.Tool.ReleaseNoteMaker",
    "summary": "Struct ScopedFileDeleter Namespace NF.Tool.ReleaseNoteMaker.Common Assembly NF.Tool.ReleaseNoteMaker.Common.dll public readonly record struct ScopedFileDeleter Constructors ScopedFileDeleter() [Obsolete(\"Do not use constructor\", true)] public ScopedFileDeleter() ScopedFileDeleter(List<string>) public ScopedFileDeleter(List<string> list) Parameters list List<string> Methods Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. public void Dispose() Register(string) public string Register(string path) Parameters path string Returns string Using() public static ScopedFileDeleter Using() Returns ScopedFileDeleter"
  },
  "api/NF.Tool.ReleaseNoteMaker.Common.Template.Category.html": {
    "href": "api/NF.Tool.ReleaseNoteMaker.Common.Template.Category.html",
    "title": "Class Category | NF.Tool.ReleaseNoteMaker",
    "summary": "Class Category Namespace NF.Tool.ReleaseNoteMaker.Common.Template Assembly NF.Tool.ReleaseNoteMaker.Common.dll public sealed record Category Inheritance object Category Constructors Category(string, List<Content>, List<string>) public Category(string DisplayName, List<Content> Contents, List<string> CategoryIssues) Parameters DisplayName string Contents List<Content> CategoryIssues List<string> Properties CategoryIssues public List<string> CategoryIssues { get; init; } Property Value List<string> Contents public List<Content> Contents { get; init; } Property Value List<Content> DisplayName public string DisplayName { get; init; } Property Value string Methods GetAllIssues() public List<string> GetAllIssues() Returns List<string>"
  },
  "api/NF.Tool.ReleaseNoteMaker.Common.Template.Content.html": {
    "href": "api/NF.Tool.ReleaseNoteMaker.Common.Template.Content.html",
    "title": "Class Content | NF.Tool.ReleaseNoteMaker",
    "summary": "Class Content Namespace NF.Tool.ReleaseNoteMaker.Common.Template Assembly NF.Tool.ReleaseNoteMaker.Common.dll public sealed record Content Inheritance object Content Constructors Content(string, List<string>) public Content(string Text, List<string> Issues) Parameters Text string Issues List<string> Properties Issues public List<string> Issues { get; init; } Property Value List<string> Text public string Text { get; init; } Property Value string Methods Deconstruct(out string, out List<string>) public void Deconstruct(out string text, out List<string> issues) Parameters text string issues List<string>"
  },
  "api/NF.Tool.ReleaseNoteMaker.Common.Template.ExEngineHost.html": {
    "href": "api/NF.Tool.ReleaseNoteMaker.Common.Template.ExEngineHost.html",
    "title": "Class ExEngineHost | NF.Tool.ReleaseNoteMaker",
    "summary": "Class ExEngineHost Namespace NF.Tool.ReleaseNoteMaker.Common.Template Assembly NF.Tool.ReleaseNoteMaker.Common.dll public static class ExEngineHost Inheritance object ExEngineHost Methods GetConfig(ITextTemplatingEngineHost) public static ReleaseNoteConfig GetConfig(this ITextTemplatingEngineHost host) Parameters host ITextTemplatingEngineHost Returns ReleaseNoteConfig GetTemplateModel(ITextTemplatingEngineHost) public static TemplateModel GetTemplateModel(this ITextTemplatingEngineHost host) Parameters host ITextTemplatingEngineHost Returns TemplateModel"
  },
  "api/NF.Tool.ReleaseNoteMaker.Common.Template.ProjectData.html": {
    "href": "api/NF.Tool.ReleaseNoteMaker.Common.Template.ProjectData.html",
    "title": "Class ProjectData | NF.Tool.ReleaseNoteMaker",
    "summary": "Class ProjectData Namespace NF.Tool.ReleaseNoteMaker.Common.Template Assembly NF.Tool.ReleaseNoteMaker.Common.dll public sealed class ProjectData Inheritance object ProjectData Constructors ProjectData(string, string, string) public ProjectData(string name, string version, string date) Parameters name string version string date string Properties ProjectDate public string ProjectDate { get; init; } Property Value string ProjectName public string ProjectName { get; init; } Property Value string ProjectVersion public string ProjectVersion { get; init; } Property Value string Methods GetProjectData(ReleaseNoteConfig, (string ProjectName, string ProjectVersion, string ProjectDate)) public static (Exception? exOrNull, ProjectData projectData) GetProjectData(ReleaseNoteConfig config, (string ProjectName, string ProjectVersion, string ProjectDate) setting) Parameters config ReleaseNoteConfig setting (string ProjectName, string ProjectVersion, string ProjectDate) Returns (Exception exOrNull, ProjectData projectData) ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object."
  },
  "api/NF.Tool.ReleaseNoteMaker.Common.Template.Section.html": {
    "href": "api/NF.Tool.ReleaseNoteMaker.Common.Template.Section.html",
    "title": "Class Section | NF.Tool.ReleaseNoteMaker",
    "summary": "Class Section Namespace NF.Tool.ReleaseNoteMaker.Common.Template Assembly NF.Tool.ReleaseNoteMaker.Common.dll public sealed record Section Inheritance object Section Constructors Section(string, List<Category>) public Section(string DisplayName, List<Category> Categories) Parameters DisplayName string Categories List<Category> Properties Categories public List<Category> Categories { get; init; } Property Value List<Category> DisplayName public string DisplayName { get; init; } Property Value string"
  },
  "api/NF.Tool.ReleaseNoteMaker.Common.Template.TemplateModel.html": {
    "href": "api/NF.Tool.ReleaseNoteMaker.Common.Template.TemplateModel.html",
    "title": "Class TemplateModel | NF.Tool.ReleaseNoteMaker",
    "summary": "Class TemplateModel Namespace NF.Tool.ReleaseNoteMaker.Common.Template Assembly NF.Tool.ReleaseNoteMaker.Common.dll public sealed record TemplateModel Inheritance object TemplateModel Constructors TemplateModel(bool, ProjectData, List<Section>) public TemplateModel(bool IsRenderTitle, ProjectData ProjectData, List<Section> Sections) Parameters IsRenderTitle bool ProjectData ProjectData Sections List<Section> Properties IsRenderTitle public bool IsRenderTitle { get; init; } Property Value bool ProjectData public ProjectData ProjectData { get; init; } Property Value ProjectData Sections public List<Section> Sections { get; init; } Property Value List<Section>"
  },
  "api/NF.Tool.ReleaseNoteMaker.Common.Template.TemplateRenderer.html": {
    "href": "api/NF.Tool.ReleaseNoteMaker.Common.Template.TemplateRenderer.html",
    "title": "Class TemplateRenderer | NF.Tool.ReleaseNoteMaker",
    "summary": "Class TemplateRenderer Namespace NF.Tool.ReleaseNoteMaker.Common.Template Assembly NF.Tool.ReleaseNoteMaker.Common.dll public sealed class TemplateRenderer Inheritance object TemplateRenderer Methods RenderFragments(string, ReleaseNoteConfig, ProjectData, List<FragmentContent>) public static Task<(Exception?, string)> RenderFragments(string templateFpath, ReleaseNoteConfig config, ProjectData projectData, List<FragmentContent> fragmentContents) Parameters templateFpath string config ReleaseNoteConfig projectData ProjectData fragmentContents List<FragmentContent> Returns Task<(Exception, string)>"
  },
  "api/NF.Tool.ReleaseNoteMaker.Common.Template.html": {
    "href": "api/NF.Tool.ReleaseNoteMaker.Common.Template.html",
    "title": "Namespace NF.Tool.ReleaseNoteMaker.Common.Template | NF.Tool.ReleaseNoteMaker",
    "summary": "Namespace NF.Tool.ReleaseNoteMaker.Common.Template Classes Category Content ExEngineHost ProjectData Section TemplateModel TemplateRenderer"
  },
  "api/NF.Tool.ReleaseNoteMaker.Common.html": {
    "href": "api/NF.Tool.ReleaseNoteMaker.Common.html",
    "title": "Namespace NF.Tool.ReleaseNoteMaker.Common | NF.Tool.ReleaseNoteMaker",
    "summary": "Namespace NF.Tool.ReleaseNoteMaker.Common Classes ReleaseNoteMakerException Structs ScopedFileDeleter"
  },
  "docs/changelog.html": {
    "href": "docs/changelog.html",
    "title": "ChangeLog | NF.Tool.ReleaseNoteMaker",
    "summary": "ChangeLog 0.0.3 (2024-12-16) Main Added command: dotnet release-note read support get version from .csproj 0.0.2 (2024-12-11) Main Changed setup ReleaseNote.config.toml"
  },
  "docs/command/command_build.html": {
    "href": "docs/command/command_build.html",
    "title": "Build | NF.Tool.ReleaseNoteMaker",
    "summary": "Build Build a release note"
  },
  "docs/command/command_check.html": {
    "href": "docs/command/command_check.html",
    "title": "Check | NF.Tool.ReleaseNoteMaker",
    "summary": "Check Check files changed $ dotnet release-note check --help DESCRIPTION: Checks files changed. USAGE: dotnet release-note check [OPTIONS] EXAMPLES: dotnet release-note check OPTIONS: DEFAULT -h, --help Prints help information --dir Build fragment in directory. Default to current directory --config Pass a custom config file at FILE_PATH. Default: ReleaseNote.config.toml --compare-with origin/main Checks files changed running git diff --name-only BRANCH... BRANCH is the branch to be compared with"
  },
  "docs/command/command_create.html": {
    "href": "docs/command/command_create.html",
    "title": "Create | NF.Tool.ReleaseNoteMaker",
    "summary": "Create Create a new fragment {Maker.Directory}(/{Section.Path})/{IssueName}.{Type.Category}(.{RetryCount}).md - example - ChangeLog.d/1.added.md - ChangeLog.d/SectionA/1.added.md ref: ReleaseNote.config.toml"
  },
  "docs/command/command_init.html": {
    "href": "docs/command/command_init.html",
    "title": "Init | NF.Tool.ReleaseNoteMaker",
    "summary": "Init Init release-note setup Example $ dotnet release-note init Initialized ./ ├── ReleaseNote.config.toml └── ChangeLog.d/ └── Template.tt"
  },
  "docs/command/command_preview.html": {
    "href": "docs/command/command_preview.html",
    "title": "Preview | NF.Tool.ReleaseNoteMaker",
    "summary": "Preview Preview a release note $ dotnet release-note preview --help DESCRIPTION: Preview a release note. USAGE: dotnet release-note preview [OPTIONS] OPTIONS: DEFAULT -h, --help Prints help information --dir Build fragment in directory. Default to current directory --config Pass a custom config file at FILE_PATH. Default: ReleaseNote.config.toml --name Pass a custom project name --version x.x.x Render the news fragments using given version --date Render the news fragments using the given date"
  },
  "docs/command/command_read.html": {
    "href": "docs/command/command_read.html",
    "title": "Read | NF.Tool.ReleaseNoteMaker",
    "summary": "Read Read Release Note"
  },
  "docs/concept.html": {
    "href": "docs/concept.html",
    "title": "Concept | NF.Tool.ReleaseNoteMaker",
    "summary": "Concept Flow flowchart LR subgraph \"ChangeLog.d/\" Files[\"` 1.added.md 2.fixed.md 3.security.md ... `\"] end subgraph ReleaseNoteMaker Files --> Fragments Fragments -->|Arrange| Model(Model) Model --> |Render| Renderer end Renderer -->|t4 | Output Renderer -->|liquid| Output Renderer{Renderer} Output[CHANGELOG.md] style Files text-align:left"
  },
  "docs/index.html": {
    "href": "docs/index.html",
    "title": "NF.Tool.ReleaseNoteMaker | NF.Tool.ReleaseNoteMaker",
    "summary": "NF.Tool.ReleaseNoteMaker Reinvent the wheel Overview NF.Tool.ReleaseNoteMaker (akka. dotnet-release-note) simplifies changelog creation in .NET projects by mimicking the functionality of Python's twisted/towncrier. It enables developers to manage changelog entries incrementally and consolidate them during release. Install dotnet tool install --global dotnet-release-note Document Documentation Dependencies use Toml format and xoofx/Tomlyn library for Config file. use T4 template and mono/t4 library. use Spectre.Console for console output. use Spectre.Console.Cli for parse args. use SmartFormat for format string. use sebastienros/fluid for liquid License This project is licensed under the MIT License. See the LICENSE file for details."
  },
  "docs/setup/config.html": {
    "href": "docs/setup/config.html",
    "title": "ReleaseNote.config.toml | NF.Tool.ReleaseNoteMaker",
    "summary": "ReleaseNote.config.toml ReleaseNote.config.toml(default) # - Document: <https://netpyoung.github.io/NF.Tool.ReleaseNoteMaker/> # - News Fragment: {Maker.Directory}(/{Section.Path})/{IssueName}.{Type.Category}(.{RetryCount}).md # - example # - ChangeLog.d/1.added.md # - ChangeLog.d/SectionA/1.added.md [ReleaseNote.Maker] # Directory = \"ChangeLog.d\" # OutputFileName = \"CHANGELOG.md\" # TemplateFilePath = \"ChangeLog.d/Template.tt\" # Name = \"\" # Version = \"\" # CsprojPath = \"\" # Ignores = [] # OrphanPrefix = \"+\" # IssuePattern = \"\" # IssueFormat = \"\" # TitleFormat = \"\" # StartString = \"<!-- release notes start -->\\n\"; # IsWrap = false # IsAllBullets = false # IsSingleFile = true # EndOfLine = \"LF\" # LF | CRLF | ENVIRONMENT [ReleaseNote.Reader] # VersionPattern = \"(0|[1-9]\\\\d*)\\\\.(0|[1-9]\\\\d*)\\\\.(0|[1-9]\\\\d*)(?:-((?:0|[1-9]\\\\d*|\\\\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\\\\.(?:0|[1-9]\\\\d*|\\\\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\\\\+([0-9a-zA-Z-]+(?:\\\\.[0-9a-zA-Z-]+)*))?\" # TitlePattern = \"^## .*(?<version>{VersionPattern})\" [[ReleaseNote.Section]] Path = \"\" DisplayName = \"Main\" # [[ReleaseNote.Section]] # Path = \"SectionA\" # DisplayName = \"Section A\" [[ReleaseNote.Type]] Category = \"feature\" DisplayName = \"Features\" IsShowContent = true [[ReleaseNote.Type]] Category = \"added\" DisplayName = \"Added\" IsShowContent = true [[ReleaseNote.Type]] Category = \"removed\" DisplayName = \"Removed\" IsShowContent = true [[ReleaseNote.Type]] Category = \"changed\" DisplayName = \"Changed\" IsShowContent = true [[ReleaseNote.Type]] Category = \"deprecated\" DisplayName = \"Deprecated\" IsShowContent = true [[ReleaseNote.Type]] Category = \"fixed\" DisplayName = \"Fixed\" IsShowContent = true [[ReleaseNote.Type]] Category = \"security\" DisplayName = \"Security\" IsShowContent = true Detail [ReleaseNote.Maker] Key Default Directory \"ChangeLog.d\" OutputFileName \"CHANGELOG.md\" TemplateFilePath \"ChangeLog.d/Template.tt\" Name \"\" Version \"\" CsprojPath \"\" Ignores [] OrphanPrefix \"+\" IssuePattern \"\" IssueFormat \"\" TitleFormat \"\" StartString \"\\n\"; IsWrap false IsAllBullets false IsSingleFile true EndOfLine \"LF\" [ReleaseNote.Reader] Key Default VersionPattern TitlePattern [[ReleaseNote.Section]] Key Default Path \"\" DisplayName \"Main\" [[ReleaseNote.Type]] Key Default Category \"feature\" DisplayName \"Features\" IsShowContent true"
  },
  "docs/setup/template.html": {
    "href": "docs/setup/template.html",
    "title": "Template | NF.Tool.ReleaseNoteMaker",
    "summary": "Template support T4 template liquid Template.tt Template.liquid <#@ template debug=\"true\" hostspecific=\"true\" language=\"C#\" #> <#@ import namespace=\"System\" #> <#@ import namespace=\"System.Linq\" #> <#@ import namespace=\"System.Collections.Generic\" #> <# //System.Diagnostics.Debugger.Launch(); //System.Diagnostics.Debugger.Break(); TemplateModel model = Host.GetTemplateModel(); ReleaseNoteConfig config = Host.GetConfig(); #> <# if (model.IsRenderTitle) { WriteLine($\"## {model.ProjectData}\"); } #> <# foreach (Section section in model.Sections) { if (!string.IsNullOrEmpty(section.DisplayName)) { WriteLine($\"\\n### {section.DisplayName}\\n\"); } if (section.Categories.Count == 0) { WriteLine(\"No significant changes.\\n\"); continue; } foreach (Category category in section.Categories) { WriteLine($\"#### {category.DisplayName}\\n\"); if (category.Contents.Count == 0) { WriteLine(\"No significant changes.\\n\"); continue; } foreach (Content content in category.Contents) { (string text, List<string> issues) = content; Write($\"- {text}\"); if (issues.Count == 0) { WriteLine(\"\"); continue; } if (text.Contains(\"\\n - \") || text.Contains(\"\\n * \")) { Write(\"\\n\\n (\"); } else { if (!string.IsNullOrEmpty(text)) { Write(\" (\"); } } for (int i = 0; i < issues.Count; i++) { string issue = issues[i]; Write(issue.Split(\": \", 2)[0]); if (i < issues.Count - 1) { Write(\", \"); } } if (!string.IsNullOrEmpty(text)) { Write(\")\"); } WriteLine(\"\"); } List<string> categoryIssues = category.GetAllIssues(); if (categoryIssues.Count > 0 && categoryIssues.First().Contains(\"]: \")) { WriteLine(\"\"); foreach (string issue in categoryIssues) { WriteLine(issue); } } WriteLine(\"\"); } } #> {%- if model.IsRenderTitle -%} ## {{ model.ProjectData }} {%- endif -%} {% for section in model.Sections -%} {%- if section.DisplayName != empty %} ### {{ section.DisplayName }} {%- endif -%} {% if section.Categories == empty %} No significant changes. {% else %} {% for category in section.Categories %} #### {{ category.DisplayName }} {% if category.Contents.Count == 0 %} No significant changes. {% else %} {%- for content in category.Contents -%} {%- assign text = content.Text %} {%- assign issues = content.Issues %} - {{ text }} {%- if issues != empty -%} {%- if text contains '\\n - ' or text contains '\\n * ' %} ( {%- else -%} {%- if text != '' %} ({%- endif -%} {%- endif -%} {%- for issue in issues -%} {{ issue | split: ': ' | first }}{% if forloop.last == false %}, {% endif %} {%- endfor %} {%- if text != empty %}){%- endif -%} {% endif %} {%- endfor %} {%- assign categoryIssues = category.CategoryIssues -%} {%- if categoryIssues.Count != 0 and categoryIssues[0] contains ']: ' %} {% for issue in categoryIssues %} {{ issue -}} {% endfor %} {%- endif %} {% endif %} {%- endfor -%} {%- endif -%} {% endfor %}"
  },
  "docs/tutorial.html": {
    "href": "docs/tutorial.html",
    "title": "Tutorial | NF.Tool.ReleaseNoteMaker",
    "summary": "Tutorial Install $ dotnet tool install --global dotnet-release-note $ dotnet release-note USAGE: dotnet release-note [OPTIONS] <COMMAND> EXAMPLES: dotnet release-note init dotnet release-note create --edit dotnet release-note create 1.added.md --content \"Hello World\" dotnet release-note build --version 1.0.0 dotnet release-note check OPTIONS: -h, --help Prints help information COMMANDS: init Init release-note setup create Create a new fragment preview Preview a release note build Build a release note check Checks files changed Init $ dotnet release-note init Initialized ./ ├── ReleaseNote.config.toml └── ChangeLog.d/ └── Template.tt Create a changelog entry: Add a new file in the changelog/ directory, named with the issue or pull request number and type. dotnet release-note create --content \"Added a cool feature!\" 1.added.md dotnet release-note create --content \"Changed a behavior!\" 2.changed.md dotnet release-note create --content \"Deprecated a module!\" 3.deprecated.md dotnet release-note create --content \"Removed a square feature!\" 4.removed.md dotnet release-note create --content \"Fixed a bug!\" 5.fixed.md dotnet release-note create --content \"Fixed a security issue!\" 6.security.md dotnet release-note create --content \"Fixed a security issue!\" 7.security.md dotnet release-note create --content \"A fix without an issue number!\" +something-unique.fixed.md ChangeLog.d/ ├── 1.added.md ├── 2.changed.md ├── 3.deprecated.md ├── 4.removed.md ├── 5.fixed.md ├── 6.security.md ├── 7.security.md └── +something-unique.fixed.md Preview changelog $ dotnet release-note preview dotnet release-note preview # x.x.x (2024-12-10) ## Main ### Security - Fixed a security issue! (#6, #7) ### Removed - Removed a square feature! (#4) ### Deprecated - Deprecated a module! (#3) ### Added - Added a cool feature! (#1) ### Changed - Changed a behavior! (#2) ### Fixed - Fixed a bug! (#5) - A fix without an issue number! Build changelog $ dotnet release-note build --version 1.0.0 * Finding news fragments... * Loading template... * Rendering news fragments... * Writing to newsfile... ❗ C:/Users/pyoung/temp2/CHANGELOG.md * Staging newsfile... ➕ C:\\Users\\pyoung\\temp2\\CHANGELOG.md I want to remove the following files: ❌ C:\\Users\\pyoung\\temp2\\ChangeLog.d\\+something-unique.fixed.md ❌ C:\\Users\\pyoung\\temp2\\ChangeLog.d\\1.added.md ❌ C:\\Users\\pyoung\\temp2\\ChangeLog.d\\2.changed.md ❌ C:\\Users\\pyoung\\temp2\\ChangeLog.d\\3.deprecated.md ❌ C:\\Users\\pyoung\\temp2\\ChangeLog.d\\4.removed.md ❌ C:\\Users\\pyoung\\temp2\\ChangeLog.d\\5.fixed.md ❌ C:\\Users\\pyoung\\temp2\\ChangeLog.d\\6.security.md ❌ C:\\Users\\pyoung\\temp2\\ChangeLog.d\\7.security.md Is it okay if I remove those files? [y/n] (y): y * Removing news fragments... * Done! $ cat .\\CHANGELOG.md cat CHANGELOG.md # 1.0.0 (2024-12-10) ## Main ### Security - Fixed a security issue! (#6, #7) ### Removed - Removed a square feature! (#4) ### Deprecated - Deprecated a module! (#3) ### Added - Added a cool feature! (#1) ### Changed - Changed a behavior! (#2) ### Fixed - Fixed a bug! (#5) - A fix without an issue number!"
  },
  "index.html": {
    "href": "index.html",
    "title": "",
    "summary": ""
  }
}